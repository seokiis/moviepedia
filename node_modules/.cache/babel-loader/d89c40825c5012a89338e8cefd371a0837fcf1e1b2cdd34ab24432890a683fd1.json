{"ast":null,"code":"var _jsxFileName = \"/Users/kimseokhee/Desktop/dive_into_React/movie_reveiw/src/components/App.js\",\n  _s = $RefreshSig$();\nimport ReviewList from \"./ReviewList\";\nimport { useEffect, useState } from \"react\";\nimport { getReviews } from \"../aip\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  //삭제 함수(선택 된 거 빼고 items로 바꿔줌.)\n  const [items, setItems] = useState([]);\n  const handleDelete = id => {\n    const nextItems = items.filter(item => item.id !== id);\n    setItems(nextItems);\n  };\n\n  //리뷰 데이터 불러오고 세팅\n  const handleLoad = async orderQuery => {\n    const {\n      reviews\n    } = await getReviews(orderQuery);\n    setItems(reviews);\n  };\n  //이렇게 되면 handleLoad가 실행되면 setItems가 실행되고, setItems가 실해오되면, App이 재실행 되기 된다.\n  //App이 재실행되면, handleload가 다시 실행되고 무한 반복이 된다.\n  //useEffect안에 handleload를 넣어주자.\n  useEffect(() => {\n    handleLoad(order);\n  }, [order]);\n\n  //최신순, 베스트순\n  const [order, setOrder] = useState(\"createdAt\");\n  const sortedItems = items.sort((a, b) => b[order] - a[order]);\n  const handleNewestClick = () => setOrder(\"createdAt\");\n  const handleBestClick = () => setOrder(\"rating\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleNewestClick,\n      children: \"\\uCD5C\\uC2E0\\uC21C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleBestClick,\n      children: \"\\uBCA0\\uC2A4\\uD2B8\\uC21C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ReviewList, {\n      items: sortedItems,\n      onDelete: handleDelete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"u5YvbqshyXTXUziQCaelrGuzK8U=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["ReviewList","useEffect","useState","getReviews","App","items","setItems","handleDelete","id","nextItems","filter","item","handleLoad","orderQuery","reviews","order","setOrder","sortedItems","sort","a","b","handleNewestClick","handleBestClick"],"sources":["/Users/kimseokhee/Desktop/dive_into_React/movie_reveiw/src/components/App.js"],"sourcesContent":["import ReviewList from \"./ReviewList\";\nimport { useEffect, useState } from \"react\";\nimport { getReviews } from \"../aip\";\n\nfunction App() {\n    //삭제 함수(선택 된 거 빼고 items로 바꿔줌.)\n    const [items, setItems] = useState([]);\n\n    const handleDelete = (id) => {\n        const nextItems = items.filter((item) => item.id !== id);\n        setItems(nextItems);\n    };\n\n    //리뷰 데이터 불러오고 세팅\n    const handleLoad = async (orderQuery) => {\n        const { reviews } = await getReviews(orderQuery);\n        setItems(reviews);\n    };\n    //이렇게 되면 handleLoad가 실행되면 setItems가 실행되고, setItems가 실해오되면, App이 재실행 되기 된다.\n    //App이 재실행되면, handleload가 다시 실행되고 무한 반복이 된다.\n    //useEffect안에 handleload를 넣어주자.\n    useEffect(() => {\n        handleLoad(order);\n    }, [order]);\n\n    //최신순, 베스트순\n    const [order, setOrder] = useState(\"createdAt\");\n    const sortedItems = items.sort((a, b) => b[order] - a[order]);\n    const handleNewestClick = () => setOrder(\"createdAt\");\n    const handleBestClick = () => setOrder(\"rating\");\n\n    return (\n        <div>\n            <button onClick={handleNewestClick}>최신순</button>\n            <button onClick={handleBestClick}>베스트순</button>\n            <ReviewList items={sortedItems} onDelete={handleDelete} />\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,UAAU,MAAM,cAAc;AACrC,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,UAAU,QAAQ,QAAQ;AAAC;AAEpC,SAASC,GAAG,GAAG;EAAA;EACX;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMK,YAAY,GAAIC,EAAE,IAAK;IACzB,MAAMC,SAAS,GAAGJ,KAAK,CAACK,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACH,EAAE,KAAKA,EAAE,CAAC;IACxDF,QAAQ,CAACG,SAAS,CAAC;EACvB,CAAC;;EAED;EACA,MAAMG,UAAU,GAAG,MAAOC,UAAU,IAAK;IACrC,MAAM;MAAEC;IAAQ,CAAC,GAAG,MAAMX,UAAU,CAACU,UAAU,CAAC;IAChDP,QAAQ,CAACQ,OAAO,CAAC;EACrB,CAAC;EACD;EACA;EACA;EACAb,SAAS,CAAC,MAAM;IACZW,UAAU,CAACG,KAAK,CAAC;EACrB,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;;EAEX;EACA,MAAM,CAACA,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,WAAW,CAAC;EAC/C,MAAMe,WAAW,GAAGZ,KAAK,CAACa,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACL,KAAK,CAAC,GAAGI,CAAC,CAACJ,KAAK,CAAC,CAAC;EAC7D,MAAMM,iBAAiB,GAAG,MAAML,QAAQ,CAAC,WAAW,CAAC;EACrD,MAAMM,eAAe,GAAG,MAAMN,QAAQ,CAAC,QAAQ,CAAC;EAEhD,oBACI;IAAA,wBACI;MAAQ,OAAO,EAAEK,iBAAkB;MAAA,UAAC;IAAG;MAAA;MAAA;MAAA;IAAA,QAAS,eAChD;MAAQ,OAAO,EAAEC,eAAgB;MAAA,UAAC;IAAI;MAAA;MAAA;MAAA;IAAA,QAAS,eAC/C,QAAC,UAAU;MAAC,KAAK,EAAEL,WAAY;MAAC,QAAQ,EAAEV;IAAa;MAAA;MAAA;MAAA;IAAA,QAAG;EAAA;IAAA;IAAA;IAAA;EAAA,QACxD;AAEd;AAAC,GAlCQH,GAAG;AAAA,KAAHA,GAAG;AAoCZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}