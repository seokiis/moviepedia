{"ast":null,"code":"var _jsxFileName = \"/Users/kimseokhee/Desktop/dive_into_React/movie_review/src/components/App.js\",\n  _s = $RefreshSig$();\nimport ReviewList from \"./ReviewList\";\nimport { useEffect, useState } from \"react\";\nimport { deleteReview, getReviews, updateReview } from \"../api\";\nimport ReviewForm from \"./ReviewForm\";\nimport { createReview } from \"../api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LIMIT = 6;\nfunction App() {\n  _s();\n  //최신순, 베스트순\n  const [order, setOrder] = useState(\"createdAt\");\n  //삭제 함수(선택 된 거 빼고 items로 바꿔줌.)\n  const [items, setItems] = useState([]);\n  const sortedItems = items.sort((a, b) => b[order] - a[order]);\n  const [offset, setOffset] = useState(0);\n  const [hasNext, setHasNext] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadingError, setLoadingError] = useState(null);\n  const handleNewestClick = () => setOrder(\"createdAt\");\n  const handleBestClick = () => setOrder(\"rating\");\n  const handleLoadMore = () => {\n    handleLoad({\n      order,\n      offset,\n      limit: LIMIT\n    });\n  };\n  const handleDelete = async id => {\n    const result = await deleteReview(id);\n    if (!result) return;\n    //비동기로 결과를 참조하니까 setter함수는 콜백으로 사용해야 한다.\n    // const nextItems = items.filter((item) => item.id !== id);\n    // setItems(nextItems);\n    setItems(prevItems => items.filter(item => item.id !== id));\n  };\n\n  //리뷰 데이터 불러오고 세팅\n  const handleLoad = async options => {\n    let result;\n    try {\n      setIsLoading(true);\n      setLoadingError(null);\n      result = await getReviews(options);\n    } catch (error) {\n      setLoadingError(error);\n      return;\n    } finally {\n      setIsLoading(false);\n    }\n    const {\n      reviews,\n      paging\n    } = result;\n    if (options.offset === 0) {\n      setItems(reviews);\n    } else {\n      setItems(prevItems => [...prevItems, ...reviews]);\n    }\n    setOffset(options.offset + reviews.length);\n    setHasNext(paging.hasNext);\n  };\n\n  //비동기로 일어나니까 콜백 함수로 일어나야함.\n  const handleCreateSuccess = review => {\n    setItems(prevItems => [review, ...prevItems]);\n  };\n  const handleUpdateSuccess = review => {\n    setItems(prevItems => {\n      const splitIdx = prevItems.findIndex(item => item.id === review.id);\n      return [\n      //slice() 메서드는 어떤 배열의 begin 부터 end 까지(end 미포함)에 대한\n      //복사본을 새로운 배열 객체로 반환합니다. 원본 배열은 바뀌지 않습니다.\n      ...prevItems.slice(0, splitIdx), review, ...prevItems.splice(splitIdx + 1)];\n    });\n  };\n\n  //이렇게 되면 handleLoad가 실행되면 setItems가 실행되고, setItems가 실해오되면, App이 재실행 되기 된다.\n  //App이 재실행되면, handleload가 다시 실행되고 무한 반복이 된다.\n  //useEffect안에 handleload를 넣어주자.\n  useEffect(() => {\n    handleLoad({\n      order,\n      offset: 0,\n      limit: LIMIT\n    });\n  }, [order]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNewestClick,\n        children: \"\\uCD5C\\uC2E0\\uC21C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleBestClick,\n        children: \"\\uBCA0\\uC2A4\\uD2B8\\uC21C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ReviewForm, {\n      onSubmit: createReview,\n      onSubmitSuccess: handleCreateSuccess\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ReviewList, {\n      items: sortedItems,\n      onDelete: handleDelete,\n      onUpdate: updateReview,\n      onUpdateSuccess: handleUpdateSuccess\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), hasNext && /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: isLoading,\n      onClick: handleLoadMore,\n      children: \"\\uB354\\uBCF4\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 17\n    }, this), (loadingError === null || loadingError === void 0 ? void 0 : loadingError.mesage) && /*#__PURE__*/_jsxDEV(\"span\", {\n      children: loadingError.mesage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 38\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"iKCSidGxVNKScSKWa1ef8XDkL+M=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["ReviewList","useEffect","useState","deleteReview","getReviews","updateReview","ReviewForm","createReview","LIMIT","App","order","setOrder","items","setItems","sortedItems","sort","a","b","offset","setOffset","hasNext","setHasNext","isLoading","setIsLoading","loadingError","setLoadingError","handleNewestClick","handleBestClick","handleLoadMore","handleLoad","limit","handleDelete","id","result","prevItems","filter","item","options","error","reviews","paging","length","handleCreateSuccess","review","handleUpdateSuccess","splitIdx","findIndex","slice","splice","mesage"],"sources":["/Users/kimseokhee/Desktop/dive_into_React/movie_review/src/components/App.js"],"sourcesContent":["import ReviewList from \"./ReviewList\";\nimport { useEffect, useState } from \"react\";\nimport { deleteReview, getReviews, updateReview } from \"../api\";\nimport ReviewForm from \"./ReviewForm\";\nimport { createReview } from \"../api\";\n\nconst LIMIT = 6;\n\nfunction App() {\n    //최신순, 베스트순\n    const [order, setOrder] = useState(\"createdAt\");\n    //삭제 함수(선택 된 거 빼고 items로 바꿔줌.)\n    const [items, setItems] = useState([]);\n    const sortedItems = items.sort((a, b) => b[order] - a[order]);\n\n    const [offset, setOffset] = useState(0);\n    const [hasNext, setHasNext] = useState(false);\n\n    const [isLoading, setIsLoading] = useState(false);\n    const [loadingError, setLoadingError] = useState(null);\n\n    const handleNewestClick = () => setOrder(\"createdAt\");\n    const handleBestClick = () => setOrder(\"rating\");\n\n    const handleLoadMore = () => {\n        handleLoad({ order, offset, limit: LIMIT });\n    };\n    const handleDelete = async (id) => {\n        const result = await deleteReview(id);\n        if (!result) return;\n        //비동기로 결과를 참조하니까 setter함수는 콜백으로 사용해야 한다.\n        // const nextItems = items.filter((item) => item.id !== id);\n        // setItems(nextItems);\n        setItems((prevItems) => items.filter((item) => item.id !== id));\n    };\n\n    //리뷰 데이터 불러오고 세팅\n    const handleLoad = async (options) => {\n        let result;\n        try {\n            setIsLoading(true);\n            setLoadingError(null);\n            result = await getReviews(options);\n        } catch (error) {\n            setLoadingError(error);\n            return;\n        } finally {\n            setIsLoading(false);\n        }\n        const { reviews, paging } = result;\n\n        if (options.offset === 0) {\n            setItems(reviews);\n        } else {\n            setItems((prevItems) => [...prevItems, ...reviews]);\n        }\n        setOffset(options.offset + reviews.length);\n        setHasNext(paging.hasNext);\n    };\n\n    //비동기로 일어나니까 콜백 함수로 일어나야함.\n    const handleCreateSuccess = (review) => {\n        setItems((prevItems) => [review, ...prevItems]);\n    };\n\n    const handleUpdateSuccess = (review) => {\n        setItems((prevItems) => {\n            const splitIdx = prevItems.findIndex(\n                (item) => item.id === review.id\n            );\n            return [\n                //slice() 메서드는 어떤 배열의 begin 부터 end 까지(end 미포함)에 대한\n                //복사본을 새로운 배열 객체로 반환합니다. 원본 배열은 바뀌지 않습니다.\n                ...prevItems.slice(0, splitIdx),\n                review,\n                ...prevItems.splice(splitIdx + 1),\n            ];\n        });\n    };\n\n    //이렇게 되면 handleLoad가 실행되면 setItems가 실행되고, setItems가 실해오되면, App이 재실행 되기 된다.\n    //App이 재실행되면, handleload가 다시 실행되고 무한 반복이 된다.\n    //useEffect안에 handleload를 넣어주자.\n    useEffect(() => {\n        handleLoad({ order, offset: 0, limit: LIMIT });\n    }, [order]);\n\n    return (\n        <div>\n            <div>\n                <button onClick={handleNewestClick}>최신순</button>\n                <button onClick={handleBestClick}>베스트순</button>\n            </div>\n            <ReviewForm\n                onSubmit={createReview}\n                onSubmitSuccess={handleCreateSuccess}\n            />\n            <ReviewList\n                items={sortedItems}\n                onDelete={handleDelete}\n                onUpdate={updateReview}\n                onUpdateSuccess={handleUpdateSuccess}\n            />\n            {hasNext && (\n                <button disabled={isLoading} onClick={handleLoadMore}>\n                    더보기\n                </button>\n            )}\n            {loadingError?.mesage && <span>{loadingError.mesage}</span>}\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,UAAU,MAAM,cAAc;AACrC,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,YAAY,EAAEC,UAAU,EAAEC,YAAY,QAAQ,QAAQ;AAC/D,OAAOC,UAAU,MAAM,cAAc;AACrC,SAASC,YAAY,QAAQ,QAAQ;AAAC;AAEtC,MAAMC,KAAK,GAAG,CAAC;AAEf,SAASC,GAAG,GAAG;EAAA;EACX;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,WAAW,CAAC;EAC/C;EACA,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAMY,WAAW,GAAGF,KAAK,CAACG,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACP,KAAK,CAAC,GAAGM,CAAC,CAACN,KAAK,CAAC,CAAC;EAE7D,MAAM,CAACQ,MAAM,EAAEC,SAAS,CAAC,GAAGjB,QAAQ,CAAC,CAAC,CAAC;EACvC,MAAM,CAACkB,OAAO,EAAEC,UAAU,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAM,CAACoB,SAAS,EAAEC,YAAY,CAAC,GAAGrB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACsB,YAAY,EAAEC,eAAe,CAAC,GAAGvB,QAAQ,CAAC,IAAI,CAAC;EAEtD,MAAMwB,iBAAiB,GAAG,MAAMf,QAAQ,CAAC,WAAW,CAAC;EACrD,MAAMgB,eAAe,GAAG,MAAMhB,QAAQ,CAAC,QAAQ,CAAC;EAEhD,MAAMiB,cAAc,GAAG,MAAM;IACzBC,UAAU,CAAC;MAAEnB,KAAK;MAAEQ,MAAM;MAAEY,KAAK,EAAEtB;IAAM,CAAC,CAAC;EAC/C,CAAC;EACD,MAAMuB,YAAY,GAAG,MAAOC,EAAE,IAAK;IAC/B,MAAMC,MAAM,GAAG,MAAM9B,YAAY,CAAC6B,EAAE,CAAC;IACrC,IAAI,CAACC,MAAM,EAAE;IACb;IACA;IACA;IACApB,QAAQ,CAAEqB,SAAS,IAAKtB,KAAK,CAACuB,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACJ,EAAE,KAAKA,EAAE,CAAC,CAAC;EACnE,CAAC;;EAED;EACA,MAAMH,UAAU,GAAG,MAAOQ,OAAO,IAAK;IAClC,IAAIJ,MAAM;IACV,IAAI;MACAV,YAAY,CAAC,IAAI,CAAC;MAClBE,eAAe,CAAC,IAAI,CAAC;MACrBQ,MAAM,GAAG,MAAM7B,UAAU,CAACiC,OAAO,CAAC;IACtC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZb,eAAe,CAACa,KAAK,CAAC;MACtB;IACJ,CAAC,SAAS;MACNf,YAAY,CAAC,KAAK,CAAC;IACvB;IACA,MAAM;MAAEgB,OAAO;MAAEC;IAAO,CAAC,GAAGP,MAAM;IAElC,IAAII,OAAO,CAACnB,MAAM,KAAK,CAAC,EAAE;MACtBL,QAAQ,CAAC0B,OAAO,CAAC;IACrB,CAAC,MAAM;MACH1B,QAAQ,CAAEqB,SAAS,IAAK,CAAC,GAAGA,SAAS,EAAE,GAAGK,OAAO,CAAC,CAAC;IACvD;IACApB,SAAS,CAACkB,OAAO,CAACnB,MAAM,GAAGqB,OAAO,CAACE,MAAM,CAAC;IAC1CpB,UAAU,CAACmB,MAAM,CAACpB,OAAO,CAAC;EAC9B,CAAC;;EAED;EACA,MAAMsB,mBAAmB,GAAIC,MAAM,IAAK;IACpC9B,QAAQ,CAAEqB,SAAS,IAAK,CAACS,MAAM,EAAE,GAAGT,SAAS,CAAC,CAAC;EACnD,CAAC;EAED,MAAMU,mBAAmB,GAAID,MAAM,IAAK;IACpC9B,QAAQ,CAAEqB,SAAS,IAAK;MACpB,MAAMW,QAAQ,GAAGX,SAAS,CAACY,SAAS,CAC/BV,IAAI,IAAKA,IAAI,CAACJ,EAAE,KAAKW,MAAM,CAACX,EAAE,CAClC;MACD,OAAO;MACH;MACA;MACA,GAAGE,SAAS,CAACa,KAAK,CAAC,CAAC,EAAEF,QAAQ,CAAC,EAC/BF,MAAM,EACN,GAAGT,SAAS,CAACc,MAAM,CAACH,QAAQ,GAAG,CAAC,CAAC,CACpC;IACL,CAAC,CAAC;EACN,CAAC;;EAED;EACA;EACA;EACA5C,SAAS,CAAC,MAAM;IACZ4B,UAAU,CAAC;MAAEnB,KAAK;MAAEQ,MAAM,EAAE,CAAC;MAAEY,KAAK,EAAEtB;IAAM,CAAC,CAAC;EAClD,CAAC,EAAE,CAACE,KAAK,CAAC,CAAC;EAEX,oBACI;IAAA,wBACI;MAAA,wBACI;QAAQ,OAAO,EAAEgB,iBAAkB;QAAA,UAAC;MAAG;QAAA;QAAA;QAAA;MAAA,QAAS,eAChD;QAAQ,OAAO,EAAEC,eAAgB;QAAA,UAAC;MAAI;QAAA;QAAA;QAAA;MAAA,QAAS;IAAA;MAAA;MAAA;MAAA;IAAA,QAC7C,eACN,QAAC,UAAU;MACP,QAAQ,EAAEpB,YAAa;MACvB,eAAe,EAAEmC;IAAoB;MAAA;MAAA;MAAA;IAAA,QACvC,eACF,QAAC,UAAU;MACP,KAAK,EAAE5B,WAAY;MACnB,QAAQ,EAAEiB,YAAa;MACvB,QAAQ,EAAE1B,YAAa;MACvB,eAAe,EAAEuC;IAAoB;MAAA;MAAA;MAAA;IAAA,QACvC,EACDxB,OAAO,iBACJ;MAAQ,QAAQ,EAAEE,SAAU;MAAC,OAAO,EAAEM,cAAe;MAAA,UAAC;IAEtD;MAAA;MAAA;MAAA;IAAA,QACH,EACA,CAAAJ,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEyB,MAAM,kBAAI;MAAA,UAAOzB,YAAY,CAACyB;IAAM;MAAA;MAAA;MAAA;IAAA,QAAQ;EAAA;IAAA;IAAA;IAAA;EAAA,QACzD;AAEd;AAAC,GAvGQxC,GAAG;AAAA,KAAHA,GAAG;AAyGZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}