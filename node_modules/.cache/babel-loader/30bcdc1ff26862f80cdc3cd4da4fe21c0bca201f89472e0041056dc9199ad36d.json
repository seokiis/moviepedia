{"ast":null,"code":"var _jsxFileName = \"/Users/kimseokhee/Desktop/dive_into_React/movie_reveiw/src/components/App.js\",\n  _s = $RefreshSig$();\nimport ReviewList from \"./ReviewList\";\nimport { useEffect, useState } from \"react\";\nimport { getReviews } from \"../aip\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LIMIT = 6;\nfunction App() {\n  _s();\n  //최신순, 베스트순\n  const [order, setOrder] = useState(\"createdAt\");\n  //삭제 함수(선택 된 거 빼고 items로 바꿔줌.)\n  const [items, setItems] = useState([]);\n  const sortedItems = items.sort((a, b) => b[order] - a[order]);\n  const [offset, setOffset] = useState(0);\n  const [hasNext, setHasNext] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const handleNewestClick = () => setOrder(\"createdAt\");\n  const handleBestClick = () => setOrder(\"rating\");\n  const handleLoadMore = () => {\n    handleLoad({\n      order,\n      offset,\n      limit: LIMIT\n    });\n  };\n  const handleDelete = id => {\n    const nextItems = items.filter(item => item.id !== id);\n    setItems(nextItems);\n  };\n\n  //리뷰 데이터 불러오고 세팅\n  const handleLoad = async options => {\n    let result;\n    try {\n      setIsLoading(true);\n      result = await getReviews(options);\n    } catch (error) {\n      console.error(error);\n      return;\n    } finally {\n      setIsLoading(false);\n    }\n    const {\n      reviews,\n      paging\n    } = result;\n    if (options.offset === 0) {\n      setItems(reviews);\n    } else {\n      setItems(prevItems => [...prevItems, ...reviews]);\n    }\n    setOffset(options.offset + reviews.length);\n    setHasNext(paging.hasNext);\n  };\n  //이렇게 되면 handleLoad가 실행되면 setItems가 실행되고, setItems가 실해오되면, App이 재실행 되기 된다.\n  //App이 재실행되면, handleload가 다시 실행되고 무한 반복이 된다.\n  //useEffect안에 handleload를 넣어주자.\n  useEffect(() => {\n    handleLoad({\n      order,\n      offset: 0,\n      limit: LIMIT\n    });\n  }, [order]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleNewestClick,\n      children: \"\\uCD5C\\uC2E0\\uC21C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleBestClick,\n      children: \"\\uBCA0\\uC2A4\\uD2B8\\uC21C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ReviewList, {\n      items: sortedItems,\n      onDelete: handleDelete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), hasNext && /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: isLoading,\n      onClick: handleLoadMore,\n      children: \"\\uB354\\uBCF4\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"F3otExDer8Ujda2/CKgJ8mb1KK8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["ReviewList","useEffect","useState","getReviews","LIMIT","App","order","setOrder","items","setItems","sortedItems","sort","a","b","offset","setOffset","hasNext","setHasNext","isLoading","setIsLoading","handleNewestClick","handleBestClick","handleLoadMore","handleLoad","limit","handleDelete","id","nextItems","filter","item","options","result","error","console","reviews","paging","prevItems","length"],"sources":["/Users/kimseokhee/Desktop/dive_into_React/movie_reveiw/src/components/App.js"],"sourcesContent":["import ReviewList from \"./ReviewList\";\nimport { useEffect, useState } from \"react\";\nimport { getReviews } from \"../aip\";\n\nconst LIMIT = 6;\n\nfunction App() {\n    //최신순, 베스트순\n    const [order, setOrder] = useState(\"createdAt\");\n    //삭제 함수(선택 된 거 빼고 items로 바꿔줌.)\n    const [items, setItems] = useState([]);\n    const sortedItems = items.sort((a, b) => b[order] - a[order]);\n\n    const [offset, setOffset] = useState(0);\n    const [hasNext, setHasNext] = useState(false);\n\n    const [isLoading, setIsLoading] = useState(false);\n\n    const handleNewestClick = () => setOrder(\"createdAt\");\n    const handleBestClick = () => setOrder(\"rating\");\n\n    const handleLoadMore = () => {\n        handleLoad({ order, offset, limit: LIMIT });\n    };\n    const handleDelete = (id) => {\n        const nextItems = items.filter((item) => item.id !== id);\n        setItems(nextItems);\n    };\n\n    //리뷰 데이터 불러오고 세팅\n    const handleLoad = async (options) => {\n        let result;\n        try {\n            setIsLoading(true);\n            result = await getReviews(options);\n        } catch (error) {\n            console.error(error);\n            return;\n        } finally {\n            setIsLoading(false);\n        }\n        const { reviews, paging } = result;\n\n        if (options.offset === 0) {\n            setItems(reviews);\n        } else {\n            setItems((prevItems) => [...prevItems, ...reviews]);\n        }\n        setOffset(options.offset + reviews.length);\n        setHasNext(paging.hasNext);\n    };\n    //이렇게 되면 handleLoad가 실행되면 setItems가 실행되고, setItems가 실해오되면, App이 재실행 되기 된다.\n    //App이 재실행되면, handleload가 다시 실행되고 무한 반복이 된다.\n    //useEffect안에 handleload를 넣어주자.\n    useEffect(() => {\n        handleLoad({ order, offset: 0, limit: LIMIT });\n    }, [order]);\n\n    return (\n        <div>\n            <button onClick={handleNewestClick}>최신순</button>\n            <button onClick={handleBestClick}>베스트순</button>\n            <ReviewList items={sortedItems} onDelete={handleDelete} />\n            {hasNext && (\n                <button disabled={isLoading} onClick={handleLoadMore}>\n                    더보기\n                </button>\n            )}\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}